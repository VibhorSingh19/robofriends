{"version":3,"sources":["Robo.js","Cardlist.js","SearchBox.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Robo","_ref","name","email","id","react_default","a","createElement","className","src","concat","Alt","Cardlist","info","map","user","i","src_Robo","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","fetch","then","response","json","users","_this3","filteredRobots","filter","toLowerCase","includes","length","src_SearchBox","src_Scroll","src_Cardlist","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yNAeeA,MAdf,SAAAC,GAA+B,IAAhBC,EAAgBD,EAAhBC,KAAKC,EAAWF,EAAXE,MAAMC,EAAKH,EAALG,GACxB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACfH,EAAAC,EAAAC,cAAA,cAECF,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BN,EAA1B,YAAwCO,IAAI,SACpDN,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,MCWMS,MAjBf,SAAAX,GAA0B,IAAPY,EAAOZ,EAAPY,KACjB,OACER,EAAAC,EAAAC,cAAA,WAEIM,EAAKC,IAAI,SAACC,EAAKC,GAEf,OAAOX,EAAAC,EAAAC,cAACU,EAAD,CACPC,IAAI,IACJd,GAAIS,EAAKG,GAAGZ,GACZF,KAAMW,EAAKG,GAAGd,KACdC,MAAOU,EAAKG,GAAGb,YCGRgB,MAbf,SAAAlB,GAA+CA,EAA3BmB,YAA2B,IAAfC,EAAepB,EAAfoB,aAC9B,OACEhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,SACAC,UAAU,mCACVc,KAAK,SACLC,YAAY,gBACZC,SAAUH,YCACI,MARf,SAAgBC,GACd,OACCrB,EAAAC,EAAAC,cAAA,OAAKoB,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAkBC,OAAO,UAC/DJ,EAAMK,WC2CKC,cAvCd,SAAAA,IACA,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACEC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAWFI,eAAiB,SAACC,GAEjBR,EAAKS,SAAS,CAACtB,YAAYqB,EAAME,OAAOC,SAZvCX,EAAKY,MAAM,CACVhC,KAAM,GACNO,YAAa,IAJhBa,mFAOmB,IAAAa,EAAAV,KAClBW,MAAM,6CACLC,KAAK,SAAAC,GAAQ,OAAEA,EAASC,SACxBF,KAAK,SAAAG,GAAK,OAAIL,EAAKJ,SAAS,CAAC7B,KAAKsC,uCAOpC,IAAAC,EAAAhB,KACOiB,EAAejB,KAAKS,MAAMhC,KAAKyC,OAAO,SAAAzC,GAC1C,OAAOA,EAAKX,KAAKqD,cAAcC,SAASJ,EAAKP,MAAMzB,YAAYmC,iBAEjE,OAA4B,IAAzBnB,KAAKS,MAAMhC,KAAK4C,OAEVpD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,eAILH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,eACAH,EAAAC,EAAAC,cAACmD,EAAD,CAAWrC,aAAce,KAAKI,iBAC9BnC,EAAAC,EAAAC,cAACoD,EAAD,KACAtD,EAAAC,EAAAC,cAACqD,EAAD,CAAU/C,KAAMwC,aAjCJQ,mBCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACP/D,EAAAC,EAAAC,cAACF,EAAAC,EAAM+D,WAAP,KACEhE,EAAAC,EAAAC,cAAC+D,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,KAAK,SAAA4B,GACJA,EAAaC,eAEdC,MAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME","file":"static/js/main.c9731e44.chunk.js","sourcesContent":["import React from 'react';\r\nfunction Robo({name,email,id}) {\r\n  return (\r\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n    <header>\r\n    \r\n     <img src={`https://robohash.org/${id}?200x200`} Alt=\"robo\"></img>\r\n     <h2>{name}</h2>\r\n     <p>{email}</p>\r\n    </header>\r\n    </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Robo;\r\n","import React from 'react';\r\nimport Robo from './Robo';\r\nfunction Cardlist({info}) {\r\n  return (\r\n    <div>\r\n     {\r\n        info.map((user,i)=>{\r\n\r\n        return <Robo \r\n        key='i' \r\n        id={info[i].id} \r\n        name={info[i].name} \r\n        email={info[i].email}/>\r\n     })\r\n    }\r\n     </div>\r\n    );\r\n}\r\n\r\nexport default Cardlist;\r\n","import React from 'react';\r\n\r\nfunction SearchBox({searchfield,searchChange}) {\r\n  return (\r\n    <div className=\"pa2\">\r\n    <input \r\n    className=\"pa3 ba b--green bg-lightest-blue\"\r\n    type=\"search\" \r\n    placeholder='Search Robots'\r\n    onChange={searchChange}\r\n    />\r\n    </div> \r\n  );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\nfunction Scroll(props) {\r\n  return (\r\n  \t<div style={{overflowY:'scroll',border:'1px solid black',height:'800px'}}>\r\n  \t{props.children}\r\n  \t</div>\r\n  );\r\n}\r\n\r\nexport default Scroll;\r\n","import React,{Component} from 'react';\r\nimport Cardlist from './Cardlist';\r\nimport SearchBox from './SearchBox';\r\nimport {info} from './info';\r\nimport './App.css';\r\nimport Scroll from './Scroll';\r\n\r\nclass App extends Component {\r\n constructor()\r\n {\r\n   super()\r\n   this.state={\r\n    info: [],\r\n    searchfield: ''\r\n   }\r\n }\r\n componentDidMount(){\r\n  fetch('http://jsonplaceholder.typicode.com/users')\r\n  .then(response=>response.json())\r\n  .then(users => this.setState({info:users}))\r\n }\r\n onSearchChange = (event)=>{\r\n  //console.log(event);\r\n  this.setState({searchfield:event.target.value})\r\n }\r\n render()\r\n {\r\n  const filteredRobots=this.state.info.filter(info=>{\r\n    return info.name.toLowerCase().includes(this.state.searchfield.toLowerCase());   \r\n  })\r\n  if(this.state.info.length===0)\r\n  {\r\n    return <h1 className=\"tc\">Loading....</h1>\r\n  }\r\n  else{\r\n     return (\r\n      <div className=\"tc\">\r\n      <h1 className=\"f1\">Robofriends</h1>\r\n      <SearchBox searchChange={this.onSearchChange}/>\r\n      <Scroll>\r\n      <Cardlist info={filteredRobots}/>\r\n      </Scroll>\r\n      </div>\r\n       );\r\n      }\r\n}\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import Robo from './Robo';\n//import Login from './Login';\n\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}